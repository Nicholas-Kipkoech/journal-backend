generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role table for different type of users in the system
model Role {
  id          Int     @id @default(autoincrement())
  uuid        String  @default(uuid())
  name        String  @unique
  description String?
  users       User[]
}

model User {
  id        Int       @id @default(autoincrement())
  uuid      String?   @unique @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  journals  Journal[]
}

model Category {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  name              String              @unique
  color             String?
  icon              String?
  journals          Journal[]           @relation("JournalCategories")
  journalCategories JournalCategories[]
}

model Journal {
  id                Int                 @id @default(autoincrement())
  uuid              String?             @unique @default(uuid())
  title             String
  content           String
  wordCount         Int?
  sentiment         String?
  tags              String[]
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  categories        Category[]          @relation("JournalCategories")
  journalCategories JournalCategories[]
}

model JournalCategories {
  journalId  Int
  categoryId Int
  journal    Journal  @relation(fields: [journalId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([journalId, categoryId]) // Composite primary key
}
